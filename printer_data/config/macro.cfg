#[safe_z_home]
#home_xy_position: 60, 60
#   A X, Y coordinate (e.g. 100, 100) where the Z homing should be
#   performed. This parameter must be provided.
#speed: 50.0
#   Speed at which the toolhead is moved to the safe Z home
#   coordinate. The default is 50 mm/s
# z_hop: 1
#   Distance (in mm) to lift the Z axis prior to homing. This is
#   applied to any homing command, even if it doesn't home the Z axis.
#   If the Z axis is already homed and the current Z position is less
#   than z_hop, then this will lift the head to a height of z_hop. If
#   the Z axis is not already homed the head is lifted by z_hop.
#   The default is to not implement Z hop.
#z_hop_speed: 15.0
#   Speed (in mm/s) at which the Z axis is lifted prior to homing. The
#   default is 15 mm/s.
#move_to_previous: False
#   When set to True, the X and Y axes are reset to their previous
#   positions after Z axis homing. The default is False.



[homing_override]
axes: xyz
gcode:
  SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=host_Fan TARGET=50
  # _cpufreq_set GOVERNOR=performance
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.7            # was 1.5 without autotunetmc
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.7            # was 1.5 without autotunetmc
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  # Homing of X
  {% if home_all or 'X' in params %}
    G4 P2000
    G28 X
    G90
    G0 X60 F6000
  {% endif %}

  # Homing of Y  
  {% if home_all or 'Y' in params %}
    G4 P2000
    G28 Y
    G90
    G0 Y60 F6000
  {% endif %}

  # Homing of Z  
  {% if home_all or 'Z' in params %}
    G28 Z
    G90
    G0 Z90 F6000
  {% endif %}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT=2.5
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT=2.5

[gcode_macro z_calibration]
# rename_existing: BASE_Z_ENDSTOP_CALIBRATE
gcode:
    M117 Calibrating Z Endstop
    {% if "z" not in printer.toolhead.homed_axes %} ; Home if needed
        G28
    {% endif %}
    Z_ENDSTOP_CALIBRATE


[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer and sets absolute positioning
  # _cpufreq_set GOVERNOR=performance
  # status_ready
  # status_homing
  # UPDATE_DELAYED_GCODE
  status_busy
  status_homing
  G28                   # Full home (XYZ)
  G90                   # Absolut position
  # status_heating
  M104 S170                                        # Set nozzle temperature to 170Â°C



  # Checks if the bed temp is higher than 80c - if so then trigger a heatsoak
  {% if params.BED|int > 90 %}
    M106 S255                                         # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                    # Turns on the nevermore
    SET_FAN_SPEED FAN=left_panel SPEED=1
    SET_FAN_SPEED FAN=right_panel SPEED=1
    G1 X{x_wait} Y{y_wait} Z15 F9000                  # Goes to center of the bed
    status_heating
    M106 S255            # Turbinen an
    M190 S{target_bed}                                # Sets target temp for the bed
    status_busy

# Wait for chamber to reach the desired temperature
    # chamber_heating
    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={target_chamber}
    status_busy
    G4 P180000                                      # Waits 3 min for the bedtemp to stabilize
#    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 80c then it skips the heatsoak and just heats up to set temp with a 2min soak.
  {% else %}
    G1 X{x_wait} Y{y_wait} Z15 F9000                # Goes to center of the bed
    status_heating
    SET_FAN_SPEED FAN=left_panel SPEED=0
    SET_FAN_SPEED FAN=right_panel SPEED=0
    M106 S255            # Turbinen an
    M190 S{target_bed}                              # Sets target temp for the bed
    status_busy
    G4 P60000                                      # Waits 1 min for the bedtemp to stabilize
  {% endif %}

  # Heats up the nozzle up to target via slicer
  M106 S0            # Turbinen aus
  #status_calibrating_z
  #G1 Z10 F6000                                     # Move Z up a bit for safe homing
  #G28 Z                                            # Home Z axis with PINDA probe
  
  M107                                              # Turns off the PT-fan
  # Create and load bed mesh
  #status_meshing
  #BED_MESH_CALIBRATE Save=hot                          # Create bed mesh

  # status_heating
  M109 S{target_extruder}                           # Heats the nozzle to your print temp
  SKEW_PROFILE LOAD=CaliFlower                      # Skew
  # Create a purge line and starts the print
  status_printing
  G1 X5 Y4 Z0.4 F10000                             # Moves to starting point
  G1 X115 E20 F1000                                # Purge line







[gcode_macro RUN_AUTO_SPEED]
gcode:
    G28
    AUTO_SPEED

[gcode_macro END_PRINT]
gcode:
    status_part_ready
    SET_SKEW CLEAR=1
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    SET_FAN_SPEED FAN=left_panel SPEED=0
    SET_FAN_SPEED FAN=right_panel SPEED=0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84
    # _cpufreq_set GOVERNOR=ondemand
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=host_Fan TARGET=45
    status_ready


[gcode_macro LOAD_FILAMENT]
gcode:
   M109 T0 S265                   ; set extruder temp and wait 
   M83                            ; set extruder to relative
   G1 E330 F2000                    ; load
   G1 E100 F150                    ; prime nozzle with filament
   G1 E-1.0 F3600                 ; retract filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   M109 T0 S265                   ; set extruder temp and wait 
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-50 F300                  ; retract some, but not too much or it will jam
   G1 E-400 F2000                   ; retract some more till the end, slowly
   M82                            ; set extruder to absolute



[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED




